name: Release
# New workflow for manual/tagged releases
# Incorporates versioning from publish-tools.yml with manual dispatch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SPIN_VERSION: v3.3.1

jobs:
  # ===== PREPARE RELEASE =====
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract version from tag
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if pre-release (contains -, like v1.0.0-beta)
            if [[ "$VERSION" == *"-"* ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          # Validate version format
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          
          echo "Preparing release ${VERSION} (prerelease: ${IS_PRERELEASE})"

  # ===== BUILD ALL =====
  # Similar to main-ci.yml but with release optimizations
  build-release:
    name: Build Release
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        batch: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1
      
      - name: Build tools (release mode)
        run: |
          # Same batch logic as main-ci.yml
          ALL_TOOLS=($(./build_all.sh list | grep "^  " | sed 's/^  //'))
          TOTAL_TOOLS=${#ALL_TOOLS[@]}
          TOOLS_PER_BATCH=$(( (TOTAL_TOOLS + 3) / 4 ))
          
          START_INDEX=$(( (${{ matrix.batch }} - 1) * TOOLS_PER_BATCH ))
          END_INDEX=$(( START_INDEX + TOOLS_PER_BATCH ))
          
          if [ $END_INDEX -gt $TOTAL_TOOLS ]; then
            END_INDEX=$TOTAL_TOOLS
          fi
          
          # Build with release optimizations
          export CARGO_PROFILE_RELEASE_LTO=true
          export CARGO_PROFILE_RELEASE_OPT_LEVEL=z
          
          for i in $(seq $START_INDEX $((END_INDEX-1))); do
            if [ $i -lt $TOTAL_TOOLS ]; then
              TOOL=${ALL_TOOLS[$i]}
              TOOL_PATH="tools/${TOOL}"
              if [ -d "$TOOL_PATH" ] && [ -f "$TOOL_PATH/Cargo.toml" ]; then
                PACKAGE_NAME=$(grep '^name = ' "$TOOL_PATH/Cargo.toml" | cut -d'"' -f2)
                cargo build -p "$PACKAGE_NAME" --target wasm32-wasip1 --release --jobs 1
              fi
            fi
          done
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-wasm-batch-${{ matrix.batch }}
          path: target/wasm32-wasip1/release/*.wasm
          retention-days: 30

  # ===== TEST RELEASE =====
  test-release:
    name: Test Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Run all tests
        run: cargo test --all --all-features --release
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-wasm-batch-*
          merge-multiple: true
          path: target/wasm32-wasip1/release/
      
      - name: Install Spin
        uses: fermyon/actions/spin/setup@v1
        with:
          version: ${{ env.SPIN_VERSION }}
      
      - name: Smoke test release build
        run: |
          # Quick validation that the release builds work
          spin up --listen 127.0.0.1:3000 &
          SPIN_PID=$!
          
          sleep 30
          
          if curl -s http://127.0.0.1:3000/mcp >/dev/null 2>&1; then
            echo "✅ Release build validated"
          else
            echo "❌ Release build failed smoke test"
            exit 1
          fi
          
          kill $SPIN_PID || true

  # ===== PUBLISH RELEASE =====
  publish-release:
    name: Publish Release
    needs: [prepare, build-release, test-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For creating GitHub release
      packages: write  # For GHCR
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-wasm-batch-*
          merge-multiple: true
          path: artifacts
      
      - name: Install Spin
        uses: fermyon/actions/spin/setup@v1
        with:
          version: ${{ env.SPIN_VERSION }}
      
      - name: Copy WASM files
        run: |
          mkdir -p target/wasm32-wasip1/release
          cp artifacts/*.wasm target/wasm32-wasip1/release/
      
      # TESTING: Login disabled for validation
      # - name: Log in to GHCR
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | spin registry login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Simulate versioned bundle publishing (TESTING)
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          echo "✅ Bundle publishing simulation for release ${VERSION}"
          echo "Would publish: ghcr.io/${{ env.IMAGE_NAME }}:${VERSION}"
          
          # Update latest only for non-prerelease
          if [[ "${{ needs.prepare.outputs.is_prerelease }}" == "false" ]]; then
            echo "Would publish: ghcr.io/${{ env.IMAGE_NAME }}:latest"
          fi
          
          echo "Release ${VERSION} publishing simulation completed"
      
      # TESTING: Original publishing commented out
      # - name: Publish versioned bundle
      #   run: |
      #     VERSION="${{ needs.prepare.outputs.version }}"
      #     
      #     # Publish with version tag
      #     spin registry push "ghcr.io/${{ env.IMAGE_NAME }}:${VERSION}"
      #     
      #     # Update latest only for non-prerelease
      #     if [[ "${{ needs.prepare.outputs.is_prerelease }}" == "false" ]]; then
      #       spin registry push "ghcr.io/${{ env.IMAGE_NAME }}:latest"
      #     fi
      #     
      #     echo "Published release ${VERSION} to GHCR"
      
      - name: Create release package
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Create release directory
          mkdir -p release-package
          cp spin.toml release-package/
          cp -r tools release-package/
          cp README.md release-package/
          
          # Copy WASM files to tool directories
          find artifacts -name "*.wasm" | while read wasm_file; do
            filename=$(basename "$wasm_file")
            find tools -name "Cargo.toml" | while read cargo_file; do
              tool_dir=$(dirname "$cargo_file")
              expected_name=$(grep '^name = ' "$cargo_file" | cut -d'"' -f2)
              if [[ "$filename" == "${expected_name}.wasm" ]]; then
                mkdir -p "release-package/$tool_dir/target/wasm32-wasip1/release"
                cp "$wasm_file" "release-package/$tool_dir/target/wasm32-wasip1/release/"
                break
              fi
            done
          done
          
          # Create archives
          tar -czf "core-tools-${VERSION}.tar.gz" -C release-package .
          cd release-package && zip -r "../core-tools-${VERSION}.zip" . && cd ..
          
          # Generate checksums
          sha256sum "core-tools-${VERSION}.tar.gz" > "core-tools-${VERSION}.tar.gz.sha256"
          sha256sum "core-tools-${VERSION}.zip" > "core-tools-${VERSION}.zip.sha256"
      
      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          cat > release-notes.md << EOF
          ## Core Tools ${VERSION}
          
          ### What's Changed
          <!-- TODO: Generate from commit messages or CHANGELOG -->
          
          ### Installation
          
          \`\`\`bash
          # Using Spin
          spin up --from ghcr.io/${{ env.IMAGE_NAME }}:${VERSION}
          
          # Or download the release package
          curl -LO https://github.com/${{ github.repository }}/releases/download/${VERSION}/core-tools-${VERSION}.tar.gz
          tar -xzf core-tools-${VERSION}.tar.gz
          spin up
          \`\`\`
          
          ### Container Images
          - Bundle: \`ghcr.io/${{ env.IMAGE_NAME }}:${VERSION}\`
          - Individual tools: \`ghcr.io/${{ github.repository_owner }}/ftl-tool-[name]:${VERSION}\`
          
          ### Requirements
          - Spin ${SPIN_VERSION} or later
          - Rust toolchain (for building from source)
          
          ### Checksums
          See attached \`.sha256\` files for verification.
          EOF
          
          echo "notes_file=release-notes.md" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Core Tools ${{ needs.prepare.outputs.version }}
          body_path: ${{ steps.notes.outputs.notes_file }}
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
          files: |
            core-tools-${{ needs.prepare.outputs.version }}.tar.gz
            core-tools-${{ needs.prepare.outputs.version }}.tar.gz.sha256
            core-tools-${{ needs.prepare.outputs.version }}.zip
            core-tools-${{ needs.prepare.outputs.version }}.zip.sha256

  # ===== PUBLISH INDIVIDUAL TOOLS WITH VERSION =====
  # From: publish-tools.yml but with version tags
  publish-tools-versioned:
    name: Publish Tools (Versioned)
    needs: [prepare, build-release, test-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - category: basic_math
          - category: string
          - category: datetime
          - category: encoding
          - category: data_formats
          - category: geospatial
          - category: math3d
          - category: statistics
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Spin
        uses: fermyon/actions/spin/setup@v1
        with:
          version: ${{ env.SPIN_VERSION }}
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-wasm-batch-*
          merge-multiple: true
          path: target/wasm32-wasip1/release/
      
      # TESTING: Login disabled for validation
      # - name: Log in to GHCR
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | spin registry login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Publish category tools
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          CATEGORY="${{ matrix.category }}"
          
          # Find all tools in category
          find "tools/$CATEGORY" -name "Cargo.toml" | while read cargo_file; do
            tool_dir=$(dirname "$cargo_file")
            TOOL_NAME=$(basename $tool_dir)
            PACKAGE_NAME=$(grep '^name = ' "$cargo_file" | cut -d'"' -f2)
            
            # Clean name
            TOOL_NAME_CLEAN=$(echo "$TOOL_NAME" | tr '_' '-')
            
            # Create spin.toml
            cat > tool-spin.toml << EOF
          spin_manifest_version = 2
          
          [application]
          name = "$TOOL_NAME"
          version = "${VERSION#v}"
          
          [[trigger.http]]
          route = "/$TOOL_NAME"
          component = "$TOOL_NAME"
          
          [component.$TOOL_NAME]
          source = "target/wasm32-wasip1/release/${PACKAGE_NAME}.wasm"
          allowed_outbound_hosts = []
          EOF
            
            # TESTING: Simulate publishing
            IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/ftl-tool-${TOOL_NAME_CLEAN}"
            echo "Would publish: ${IMAGE_NAME}:${VERSION}"
            
            # Update latest for non-prerelease
            if [[ "${{ needs.prepare.outputs.is_prerelease }}" == "false" ]]; then
              echo "Would publish: ${IMAGE_NAME}:latest"
            fi
            
            echo "Tool publishing simulation: ${IMAGE_NAME}:${VERSION}"
      
      # TESTING: Original publishing commented out
      #       # Publish with version
      #       IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/ftl-tool-${TOOL_NAME_CLEAN}"
      #       spin registry push --build -f tool-spin.toml "${IMAGE_NAME}:${VERSION}"
      #       
      #       # Update latest for non-prerelease
      #       if [[ "${{ needs.prepare.outputs.is_prerelease }}" == "false" ]]; then
      #         spin registry push --build -f tool-spin.toml "${IMAGE_NAME}:latest"
      #       fi
      #       
      #       echo "Published ${IMAGE_NAME}:${VERSION}"
          done

  # ===== RELEASE SUMMARY =====
  release-summary:
    name: Release Summary
    if: always()
    needs: [prepare, build-release, test-release, publish-release, publish-tools-versioned]
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          echo "## Release Summary for ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          if [[ "${{ needs.build-release.result }}" == "success" ]]; then
            echo "✅ **Build**: Release build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test status
          if [[ "${{ needs.test-release.result }}" == "success" ]]; then
            echo "✅ **Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Publishing status
          if [[ "${{ needs.publish-release.result }}" == "success" ]]; then
            echo "✅ **GitHub Release**: Created successfully" >> $GITHUB_STEP_SUMMARY
            echo "✅ **GHCR Bundle**: Published as ${VERSION}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Publishing**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.publish-tools-versioned.result }}" == "success" ]]; then
            echo "✅ **Individual Tools**: Published with version tags" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Individual Tools**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Bundle: \`ghcr.io/${{ github.repository }}:${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Individual Tools: \`ghcr.io/${{ github.repository_owner }}/ftl-tool-[name]:${VERSION}\`" >> $GITHUB_STEP_SUMMARY