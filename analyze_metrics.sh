#!/bin/bash

# Core Tools - Simple Metrics Analysis Script
# Analyzes TSV metrics files generated by size tracking

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to display usage
usage() {
    cat << EOF
Core Tools - Metrics Analysis Script

USAGE:
    $0 [OPTIONS] <metrics_file.tsv>

OPTIONS:
    --top N         Show top N smallest tools (default: 10)
    --by-profile    Group results by profile
    --by-opt        Group results by optimization level
    --summary       Show only summary statistics
    --help          Show this help message

EXAMPLES:
    $0 build_metrics_20241201_120000.tsv
    $0 --by-profile metrics.tsv
    $0 --top 5 --summary metrics.tsv

EOF
}

# Parse command line arguments
METRICS_FILE=""
TOP_N=10
GROUP_BY=""
SUMMARY_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --top)
            TOP_N="$2"
            shift 2
            ;;
        --by-profile)
            GROUP_BY="profile"
            shift
            ;;
        --by-opt)
            GROUP_BY="opt"
            shift
            ;;
        --summary)
            SUMMARY_ONLY=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        -*)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            METRICS_FILE="$1"
            shift
            ;;
    esac
done

# Validate input
if [[ -z "$METRICS_FILE" ]]; then
    log_error "Metrics file required"
    usage
    exit 1
fi

if [[ ! -f "$METRICS_FILE" ]]; then
    log_error "File not found: $METRICS_FILE"
    exit 1
fi

# Function to format bytes
format_bytes() {
    local bytes=$1
    if (( bytes < 1024 )); then
        echo "${bytes}B"
    elif (( bytes < 1048576 )); then
        echo "$((bytes / 1024))KB"
    else
        printf "%.1fMB" $(awk "BEGIN {print $bytes / 1048576}")
    fi
}

# Function to show summary statistics
show_summary() {
    local total_lines=$(tail -n +2 "$METRICS_FILE" | wc -l)
    local total_original=0
    local total_optimized=0
    
    # Calculate totals
    while IFS=$'\t' read -r tool profile opt_level opt_passes original optimized reduction; do
        total_original=$((total_original + original))
        total_optimized=$((total_optimized + optimized))
    done < <(tail -n +2 "$METRICS_FILE")
    
    local total_saved=$((total_original - total_optimized))
    local avg_reduction=0
    if (( total_original > 0 )); then
        avg_reduction=$(awk "BEGIN {printf \"%.2f\", ($total_saved / $total_original) * 100}")
    fi
    
    echo -e "\n${CYAN}=== SUMMARY STATISTICS ===${NC}"
    echo "Total experiments: $total_lines"
    echo "Total original size: $(format_bytes $total_original)"
    echo "Total optimized size: $(format_bytes $total_optimized)"
    echo "Total space saved: $(format_bytes $total_saved)"
    echo "Average reduction: ${avg_reduction}%"
}

# Function to show top smallest tools
show_top_smallest() {
    echo -e "\n${CYAN}=== TOP $TOP_N SMALLEST OPTIMIZED TOOLS ===${NC}"
    echo -e "${YELLOW}Size\t\tReduction\tTool\t\t\tProfile\t\tOptimization${NC}"
    
    tail -n +2 "$METRICS_FILE" | sort -t$'\t' -k6 -n | head -n "$TOP_N" | \
    while IFS=$'\t' read -r tool profile opt_level opt_passes original optimized reduction; do
        printf "%-10s\t%-8s\t%-20s\t%-15s\t%s\n" \
            "$(format_bytes $optimized)" \
            "${reduction}%" \
            "$tool" \
            "$profile" \
            "$opt_level"
    done
}

# Function to show top reduction percentages
show_top_reductions() {
    echo -e "\n${CYAN}=== TOP $TOP_N BEST SIZE REDUCTIONS ===${NC}"
    echo -e "${YELLOW}Reduction\tSize Saved\tTool\t\t\tProfile\t\tOptimization${NC}"
    
    tail -n +2 "$METRICS_FILE" | sort -t$'\t' -k7 -n -r | head -n "$TOP_N" | \
    while IFS=$'\t' read -r tool profile opt_level opt_passes original optimized reduction; do
        local saved=$((original - optimized))
        printf "%-8s\t%-10s\t%-20s\t%-15s\t%s\n" \
            "${reduction}%" \
            "$(format_bytes $saved)" \
            "$tool" \
            "$profile" \
            "$opt_level"
    done
}

# Function to group by profile
group_by_profile() {
    echo -e "\n${CYAN}=== RESULTS BY PROFILE ===${NC}"
    
    # Get unique profiles
    local profiles=$(tail -n +2 "$METRICS_FILE" | cut -f2 | sort -u)
    
    for profile in $profiles; do
        echo -e "\n${MAGENTA}Profile: $profile${NC}"
        
        local count=0
        local sum_reduction=0
        local total_original=0
        local total_optimized=0
        
        while IFS=$'\t' read -r tool p opt_level opt_passes original optimized reduction; do
            if [[ "$p" == "$profile" ]]; then
                count=$((count + 1))
                sum_reduction=$(awk "BEGIN {print $sum_reduction + $reduction}")
                total_original=$((total_original + original))
                total_optimized=$((total_optimized + optimized))
            fi
        done < <(tail -n +2 "$METRICS_FILE")
        
        if (( count > 0 )); then
            local avg_reduction=$(awk "BEGIN {printf \"%.2f\", $sum_reduction / $count}")
            local total_saved=$((total_original - total_optimized))
            
            echo "  Tools tested: $count"
            echo "  Average reduction: ${avg_reduction}%"
            echo "  Total space saved: $(format_bytes $total_saved)"
            
            # Show best result for this profile
            local best=$(grep "^[^\t]*\t$profile\t" "$METRICS_FILE" | sort -t$'\t' -k7 -n -r | head -1)
            if [[ -n "$best" ]]; then
                local best_tool=$(echo "$best" | cut -f1)
                local best_reduction=$(echo "$best" | cut -f7)
                echo "  Best result: $best_tool (${best_reduction}% reduction)"
            fi
        fi
    done
}

# Function to group by optimization level
group_by_opt() {
    echo -e "\n${CYAN}=== RESULTS BY OPTIMIZATION LEVEL ===${NC}"
    
    # Get unique optimization levels
    local opt_levels=$(tail -n +2 "$METRICS_FILE" | cut -f3 | sort -u)
    
    for opt_level in $opt_levels; do
        echo -e "\n${MAGENTA}Optimization: $opt_level${NC}"
        
        local count=0
        local sum_reduction=0
        local total_original=0
        local total_optimized=0
        
        while IFS=$'\t' read -r tool profile o opt_passes original optimized reduction; do
            if [[ "$o" == "$opt_level" ]]; then
                count=$((count + 1))
                sum_reduction=$(awk "BEGIN {print $sum_reduction + $reduction}")
                total_original=$((total_original + original))
                total_optimized=$((total_optimized + optimized))
            fi
        done < <(tail -n +2 "$METRICS_FILE")
        
        if (( count > 0 )); then
            local avg_reduction=$(awk "BEGIN {printf \"%.2f\", $sum_reduction / $count}")
            local total_saved=$((total_original - total_optimized))
            
            echo "  Tools tested: $count"
            echo "  Average reduction: ${avg_reduction}%"
            echo "  Total space saved: $(format_bytes $total_saved)"
            
            # Show best result for this optimization level
            local best=$(grep "^[^\t]*\t[^\t]*\t$opt_level\t" "$METRICS_FILE" | sort -t$'\t' -k7 -n -r | head -1)
            if [[ -n "$best" ]]; then
                local best_tool=$(echo "$best" | cut -f1)
                local best_reduction=$(echo "$best" | cut -f7)
                echo "  Best result: $best_tool (${best_reduction}% reduction)"
            fi
        fi
    done
}

# Main execution
main() {
    log_info "Analyzing metrics from: $METRICS_FILE"
    
    # Show summary
    show_summary
    
    if [[ "$SUMMARY_ONLY" = true ]]; then
        exit 0
    fi
    
    # Show groupings if requested
    case "$GROUP_BY" in
        profile)
            group_by_profile
            ;;
        opt)
            group_by_opt
            ;;
        *)
            # Default: show top results
            show_top_smallest
            show_top_reductions
            ;;
    esac
    
    echo ""
}

# Run main function
main "$@"